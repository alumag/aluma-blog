/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SocialMediaLink = {
  _id: string;
  _type: "socialMediaLink";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  type:
    | "discord"
    | "telegram"
    | "linkedin"
    | "github"
    | "stackoverflow"
    | "reddit"
    | "duolingo"
    | "facebook"
    | "instagram"
    | "twitter"
    | "email"
    | "whatsapp"
    | "goodreads";
  link: string;
  hidden: boolean;
};

export type LocalePicture = {
  _type: "localePicture";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: LocaleString;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type LocaleString = {
  _type: "localeString";
  en?: string;
  he?: string;
};

export type Tags = Array<
  {
    _key: string;
  } & Tag
>;

export type Tag = {
  _type: "tag";
  value?: string;
  label?: string;
};

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "siteMetadata";
      };
};

export type SiteMetadata = {
  _id: string;
  _type: "siteMetadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteName: string;
  title: string;
  description: string;
  dir: "rtl" | "ltr";
  locale: string;
  language: "he" | "en";
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  publishedAt: string;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  gallery?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "gallery";
  };
  tags: Tags;
  language: "he" | "en";
};

export type Gallery = {
  _id: string;
  _type: "gallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  images?: Array<
    {
      _key: string;
    } & LocalePicture
  >;
  display?: "stacked" | "inline" | "carousel";
  zoom?: boolean;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | SocialMediaLink
  | LocalePicture
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | LocaleString
  | Tags
  | Tag
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | SiteMetadata
  | Post
  | Gallery
  | Slug
  | InternationalizedArrayReference;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: getSocialMediaLinksQuery
// Query: *[_type == "socialMediaLink" && hidden == false] | order(_createdAt desc)
export type GetSocialMediaLinksQueryResult = Array<{
  _id: string;
  _type: "socialMediaLink";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  type:
    | "discord"
    | "duolingo"
    | "email"
    | "facebook"
    | "github"
    | "goodreads"
    | "instagram"
    | "linkedin"
    | "reddit"
    | "stackoverflow"
    | "telegram"
    | "twitter"
    | "whatsapp";
  link: string;
  hidden: boolean;
}>;
// Variable: getSiteMetadataQuery
// Query: *[_type == "siteMetadata" && language == $language][0]{    siteName,    title,    description,    dir,    locale,    language,}
export type GetSiteMetadataQueryResult = {
  siteName: string;
  title: string;
  description: string;
  dir: "ltr" | "rtl";
  locale: string;
  language: "en" | "he";
} | null;
// Variable: getCraftPostsLastModifiedQuery
// Query: *[_type == "post" && language == $language && defined(slug.current) && "craft" in tags[].value] | order(_updatedAt desc)[0]._updatedAt
export type GetCraftPostsLastModifiedQueryResult = string | null;
// Variable: getCraftSitemapQuery
// Query: *[_type == "post" && language == $language && defined(slug.current) && "craft" in tags[].value] | order(_updatedAt desc)[]{  'url': "craft/" + slug.current,  'lastModified': _updatedAt,}
export type GetCraftSitemapQueryResult = Array<{
  url: string;
  lastModified: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "socialMediaLink" && hidden == false] | order(_createdAt desc)': GetSocialMediaLinksQueryResult;
    '\n*[_type == "siteMetadata" && language == $language][0]{\n    siteName,\n    title,\n    description,\n    dir,\n    locale,\n    language,\n}': GetSiteMetadataQueryResult;
    '\n  *[_type == "post" && language == $language && defined(slug.current) && "craft" in tags[].value] | order(_updatedAt desc)[0]._updatedAt': GetCraftPostsLastModifiedQueryResult;
    '\n*[_type == "post" && language == $language && defined(slug.current) && "craft" in tags[].value] | order(_updatedAt desc)[]{\n  \'url\': "craft/" + slug.current,\n  \'lastModified\': _updatedAt,\n}': GetCraftSitemapQueryResult;
  }
}
